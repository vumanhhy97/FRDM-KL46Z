
/* TypeDefs */
typedef struct 
{
  uint8_t CORE_SYS;
  uint8_t PERIPHERAL;
  uint8_t FLEXBUS;
  uint8_t FLASH;
} clock_divider;

/*Constant */
enum 
{
  CLKDIV1,
  CLKDIV2,
  CLKDIV3,
  CLKDIV4,
  CLKDIV5,
  CLKDIV6,
  CLKDIV7,
  CLKDIV8,
  CLKDIV9,
  CLKDIV10,
  CLKDIV11,
  CLKDIV12,
  CLKDIV13,
  CLKDIV14,
  CLKDIV15,
  CLKDIV16
};

enum
{
  DCO25MHZ,
  DCO50MHZ,
  DCO75MHZ,
  DCO100MHZ
};

enum
{
  PRDIV1,
  PRDIV2,
  PRDIV3,
  PRDIV4,
  PRDIV5,
  PRDIV6,
  PRDIV7,
  PRDIV8,
  PRDIV9,
  PRDIV10,
  PRDIV11,
  PRDIV12,
  PRDIV13,
  PRDIV14,
  PRDIV15,
  PRDIV16,
  PRDIV17,
  PRDIV18,
  PRDIV19,
  PRDIV20,
  PRDIV21,
  PRDIV22,
  PRDIV23,
  PRDIV24,
  PRDIV25  
};

enum
{
  VDIV24,
  VDIV25,
  VDIV26,
  VDIV27,
  VDIV28,
  VDIV29,
  VDIV30,
  VDIV31,
  VDIV32,
  VDIV33,
  VDIV34,
  VDIV35,
  VDIV36,
  VDIV37,
  VDIV38,
  VDIV39,
  VDIV40,
  VDIV41,
  VDIV42,
  VDIV43,
  VDIV44,
  VDIV45,
  VDIV46,
  VDIV47, 
  VDIV48,
  VDIV49,
  VDIV50,
  VDIV51,
  VDIV52,
  VDIV53,
  VDIV54,
  VDIV55
};
  
enum
{
  FREQ_LOW_KHZ,
  FREQ_1MHZ_8MHZ,
  FREQ_8MHZ_32MHZ
};

/*
TestCases
0	TSTCSZERO
1	VLLS1
2	VLLS2
3	VLLS3
4	LLS
5	VLPS
6	STOP
7	VLPW_CG_OFF_2M
8	VLPW_CG_ON_2M
9	VLPW_CG_OFF_4M
10	VLPW_CG_ON_4M
11	VLPR_CG_OFF_CACHE_1M
12	VLPR_CG_ON_CACHE_1M
13	VLPR_CG_OFF_NOCACHE_1M
14	VLPR_CG_ON_NOCACHE_1M
15	VLPR_CG_OFF_CACHE_1M_FLASH_0P5M
16	VLPR_CG_ON_CACHE_1M_FLASH_0P5M
17	VLPR_CG_OFF_NOCACHE_1M_FLASH_0P5M
18	VLPR_CG_ON_NOCACHE_1M_FLASH_0P5M
19	VLPR_CG_OFF_CACHE_2M
20	VLPR_CG_ON_CACHE_2M
21	VLPR_CG_OFF_NOCACHE_2M
22	VLPR_CG_ON_NOCACHE_2M
23	VLPR_CG_OFF_CACHE_2M_BUS_1M_FLASH_0P5M
24	VLPR_CG_ON_CACHE_2M_BUS_1M_FLASH_0P5M
25	VLPR_CG_OFF_NOCACHE_2M_BUS_1M_FLASH_0P5M
26	VLPR_CG_ON_NOCACHE_2M_BUS_1M_FLASH_0P5M
27	VLPR_CG_OFF_CACHE_2M_BUS_2M_FLASH_0P5M
28	VLPR_CG_ON_CACHE_2M_BUS_2M_FLASH_0P5M
29	VLPR_CG_OFF_NOCACHE_2M_BUS_2M_FLASH_0P5M
30	VLPR_CG_ON_NOCACHE_2M_BUS_2M_FLASH_0P5M
31	VLPR_CG_OFF_CACHE_4M
32	VLPR_CG_ON_CACHE_4M
33	VLPR_CG_OFF_NOCACHE_4M
34	VLPR_CG_ON_NOCACHE_4M
35	VLPR_CG_OFF_CACHE_4M_BUS_2M
36	VLPR_CG_ON_CACHE_4M_BUS_2M
37	VLPR_CG_OFF_NOCACHE_4M_BUS_2M
38	VLPR_CG_ON_NOCACHE_4M_BUS_2M
39	RIDD_CG_OFF_CACHE_1M_FBE
40	RIDD_CG_ON_CACHE_1M_FBE
41	RIDD_CG_OFF_NOCACHE_1M_FBE
42	RIDD_CG_ON_NOCACHE_1M_FBE
43	RIDD_CG_OFF_CACHE_2M_FBE
44	RIDD_CG_ON_CACHE_2M_FBE
45	RIDD_CG_OFF_NOCACHE_2M_FBE
46	RIDD_CG_ON_NOCACHE_2M_FBE
47	RIDD_CG_OFF_CACHE_4M_FBE
48	RIDD_CG_ON_CACHE_4M_FBE
49	RIDD_CG_OFF_NOCACHE_4M_FBE
50	RIDD_CG_ON_NOCACHE_4M_FBE
51	RIDD_CG_OFF_CACHE_6P25M_FBE
52	RIDD_CG_ON_CACHE_6P25M_FBE
53	RIDD_CG_OFF_NOCACHE_6P25M_FBE
54	RIDD_CG_ON_NOCACHE_6P25M_FBE
55	RIDD_CG_OFF_CACHE_12P5M_FBE
56	RIDD_CG_ON_CACHE_12P5M_FBE
57	RIDD_CG_OFF_NOCACHE_12P5M_FBE
58	RIDD_CG_ON_NOCACHE_12P5M_FBE
59	RIDD_CG_OFF_CACHE_25M_FBE
60	RIDD_CG_ON_CACHE_25M_FBE
61	RIDD_CG_OFF_NOCACHE_25M_FBE
62	RIDD_CG_ON_NOCACHE_25M_FBE
63	RIDD_CG_OFF_CACHE_50M_FBE
64	RIDD_CG_ON_CACHE_50M_FBE
65	RIDD_CG_OFF_NOCACHE_50M_FBE
66	RIDD_CG_ON_NOCACHE_50M_FBE
67	RIDD_CG_OFF_CACHE_72M_FEE
68	RIDD_CG_ON_CACHE_72M_FEE
69	RIDD_CG_OFF_NOCACHE_72M_FEE
70	RIDD_CG_ON_NOCACHE_72M_FEE
71	WAIT_CG_OFF_72M_FEE
72	WAIT_CG_ON_72M_FEE
73	RIDD_CG_OFF_CACHE_72M_PEE
74	RIDD_CG_ON_CACHE_72M_PEE
75	RIDD_CG_OFF_NOCACHE_72M_PEE
76	RIDD_CG_ON_NOCACHE_72M_PEE
77	WAIT_CG_OFF_72M_PEE
78	WAIT_CG_ON_72M_PEE
79	WAIT_CG_OFF_25M_FEI
80	WAIT_CG_ON_25M_FEI
81	RIDD_CG_OFF_CACHE_25M_FEI
82	RIDD_CG_ON_CACHE_25M_FEI
83	RIDD_CG_OFF_NOCACHE_25M_FEI
84	RIDD_CG_ON_NOCACHE_25M_FEI
85	WAIT_CG_OFF_50M_FEI
86	WAIT_CG_ON_50M_FEI
87	RIDD_CG_OFF_CACHE_50M_FEI
88	RIDD_CG_ON_CACHE_50M_FEI
89	RIDD_CG_OFF_NOCACHE_50M_FEI
90	RIDD_CG_ON_NOCACHE_50M_FEI
*/
enum 
{
  TSTCSZERO,
  VLLS0A,
  VLLS0B,
  VLLS1,
  VLLS2,
  VLLS3,
  LLS,
  VLPS,  
  STOP,
  VLPW_CG_OFF_2M,
  VLPW_CG_ON_2M,
  VLPW_CG_OFF_4M,
  VLPW_CG_ON_4M,
  VLPR_CG_OFF_CACHE_1M,
  VLPR_CG_ON_CACHE_1M,
  VLPR_CG_OFF_NOCACHE_1M,
  VLPR_CG_ON_NOCACHE_1M,
  VLPR_CG_OFF_CACHE_1M_FLASH_0P5M,
  VLPR_CG_ON_CACHE_1M_FLASH_0P5M,
  VLPR_CG_OFF_NOCACHE_1M_FLASH_0P5M,
  VLPR_CG_ON_NOCACHE_1M_FLASH_0P5M,
  VLPR_CG_OFF_CACHE_2M,
  VLPR_CG_ON_CACHE_2M,
  VLPR_CG_OFF_NOCACHE_2M,
  VLPR_CG_ON_NOCACHE_2M,
  VLPR_CG_OFF_CACHE_2M_BUS_1M_FLASH_0P5M,
  VLPR_CG_ON_CACHE_2M_BUS_1M_FLASH_0P5M,
  VLPR_CG_OFF_NOCACHE_2M_BUS_1M_FLASH_0P5M,
  VLPR_CG_ON_NOCACHE_2M_BUS_1M_FLASH_0P5M,
  VLPR_CG_OFF_CACHE_2M_BUS_2M_FLASH_0P5M,
  VLPR_CG_ON_CACHE_2M_BUS_2M_FLASH_0P5M,
  VLPR_CG_OFF_NOCACHE_2M_BUS_2M_FLASH_0P5M,
  VLPR_CG_ON_NOCACHE_2M_BUS_2M_FLASH_0P5M,
  VLPR_CG_OFF_CACHE_4M,
  VLPR_CG_ON_CACHE_4M,
  VLPR_CG_OFF_NOCACHE_4M,
  VLPR_CG_ON_NOCACHE_4M,
  VLPR_CG_OFF_CACHE_4M_BUS_2M,
  VLPR_CG_ON_CACHE_4M_BUS_2M,
  VLPR_CG_OFF_NOCACHE_4M_BUS_2M,
  VLPR_CG_ON_NOCACHE_4M_BUS_2M,
  RIDD_CG_OFF_CACHE_1M_FBE,
  RIDD_CG_ON_CACHE_1M_FBE,
  RIDD_CG_OFF_NOCACHE_1M_FBE,
  RIDD_CG_ON_NOCACHE_1M_FBE,  
  RIDD_CG_OFF_CACHE_2M_FBE,
  RIDD_CG_ON_CACHE_2M_FBE,
  RIDD_CG_OFF_NOCACHE_2M_FBE,
  RIDD_CG_ON_NOCACHE_2M_FBE,  
  RIDD_CG_OFF_CACHE_4M_FBE,
  RIDD_CG_ON_CACHE_4M_FBE,
  RIDD_CG_OFF_NOCACHE_4M_FBE,
  RIDD_CG_ON_NOCACHE_4M_FBE,  
  RIDD_CG_OFF_CACHE_6P25M_FBE,
  RIDD_CG_ON_CACHE_6P25M_FBE,
  RIDD_CG_OFF_NOCACHE_6P25M_FBE,
  RIDD_CG_ON_NOCACHE_6P25M_FBE,  
  RIDD_CG_OFF_CACHE_12P5M_FBE,
  RIDD_CG_ON_CACHE_12P5M_FBE,
  RIDD_CG_OFF_NOCACHE_12P5M_FBE,
  RIDD_CG_ON_NOCACHE_12P5M_FBE,  
  RIDD_CG_OFF_CACHE_25M_FBE,
  RIDD_CG_ON_CACHE_25M_FBE,
  RIDD_CG_OFF_NOCACHE_25M_FBE,
  RIDD_CG_ON_NOCACHE_25M_FBE,
  RIDD_CG_OFF_CACHE_50M_FBE,
  RIDD_CG_ON_CACHE_50M_FBE,
  RIDD_CG_OFF_NOCACHE_50M_FBE,
  RIDD_CG_ON_NOCACHE_50M_FBE,
  RIDD_CG_OFF_CACHE_72M_FEE,
  RIDD_CG_ON_CACHE_72M_FEE,
  RIDD_CG_OFF_NOCACHE_72M_FEE,
  RIDD_CG_ON_NOCACHE_72M_FEE,
  WAIT_CG_OFF_72M_FEE,
  WAIT_CG_ON_72M_FEE,
  RIDD_CG_OFF_CACHE_72M_PEE,
  RIDD_CG_ON_CACHE_72M_PEE,
  RIDD_CG_OFF_NOCACHE_72M_PEE,
  RIDD_CG_ON_NOCACHE_72M_PEE,
  WAIT_CG_OFF_72M_PEE,
  WAIT_CG_ON_72M_PEE,
  WAIT_CG_OFF_25M_FEI,
  WAIT_CG_ON_25M_FEI,
  RIDD_CG_OFF_CACHE_25M_FEI,
  RIDD_CG_ON_CACHE_25M_FEI,
  RIDD_CG_OFF_NOCACHE_25M_FEI,
  RIDD_CG_ON_NOCACHE_25M_FEI,
  WAIT_CG_OFF_50M_FEI,
  WAIT_CG_ON_50M_FEI,
  RIDD_CG_OFF_CACHE_50M_FEI,
  RIDD_CG_ON_CACHE_50M_FEI,
  RIDD_CG_OFF_NOCACHE_50M_FEI,
  RIDD_CG_ON_NOCACHE_50M_FEI
};

//function definition
void change_mcg_fei_range(uint8_t range);
void disable_watchdog(void);
void config_clocks_out_to_port(void);
int determine_power_mode_entry_type();
void configure_min_clock_gating(void);
void configure_max_clock_gating(void);
void dut_labview_handshake(void);
void SetPortACtoDefault(void);
void enter_low_power_mode(void);
void vlls0a_entry_setup(void);
void vlls0b_entry_setup(void);
void vlls1_entry_setup(void);
void vlls2_entry_setup(void);
void vlls3_entry_setup(void);
void lls_entry_setup(void);
void vlps_entry_setup(void);
void stop_entry_setup(void);
void change_from_run_to_vlpr_mode(clock_divider *p);
void MemoryRead(uint32_t startAddr, uint32_t endAddr);
void sctrim_25Mhz(void);
void set_SIM_CLKDIV1(clock_divider *p);
__ramfunc void cache_disable(void);
__ramfunc void cache_enable(void);
void mcg_osc_fbe(uint8_t range);
void mcg_osc_fee(uint8_t dco);
void mcg_config_fbe_mode(void);
void mcg_config_fee_mode(uint8_t dco);
void wait_hsdio_reset (void);
void pll_initb(uint8_t prdiv, uint8_t vdiv);